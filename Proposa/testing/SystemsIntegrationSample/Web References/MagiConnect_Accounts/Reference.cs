//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SystemsIntegrationSample.MagiConnect_Accounts {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="accountsSoap", Namespace="http://www.magishop.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class accounts : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestPingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportAccountsUsingDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAccountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public accounts() {
            this.Url = global::SystemsIntegrationSample.Properties.Settings.Default.SystemsIntegrationSample_MagiConnect_Accounts_accounts;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestPingCompletedEventHandler TestPingCompleted;
        
        /// <remarks/>
        public event ExportAccountsCompletedEventHandler ExportAccountsCompleted;
        
        /// <remarks/>
        public event ExportAccountsUsingDateRangeCompletedEventHandler ExportAccountsUsingDateRangeCompleted;
        
        /// <remarks/>
        public event InsertAccountCompletedEventHandler InsertAccountCompleted;
        
        /// <remarks/>
        public event UpdateAccountCompletedEventHandler UpdateAccountCompleted;
        
        /// <remarks/>
        public event DeleteAccountCompletedEventHandler DeleteAccountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/TestPing", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TestPing(string[] Parameters) {
            object[] results = this.Invoke("TestPing", new object[] {
                        Parameters});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TestPingAsync(string[] Parameters) {
            this.TestPingAsync(Parameters, null);
        }
        
        /// <remarks/>
        public void TestPingAsync(string[] Parameters, object userState) {
            if ((this.TestPingOperationCompleted == null)) {
                this.TestPingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestPingOperationCompleted);
            }
            this.InvokeAsync("TestPing", new object[] {
                        Parameters}, this.TestPingOperationCompleted, userState);
        }
        
        private void OnTestPingOperationCompleted(object arg) {
            if ((this.TestPingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestPingCompleted(this, new TestPingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/ExportAccounts", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportAccounts(string Login, string Password) {
            object[] results = this.Invoke("ExportAccounts", new object[] {
                        Login,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportAccountsAsync(string Login, string Password) {
            this.ExportAccountsAsync(Login, Password, null);
        }
        
        /// <remarks/>
        public void ExportAccountsAsync(string Login, string Password, object userState) {
            if ((this.ExportAccountsOperationCompleted == null)) {
                this.ExportAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportAccountsOperationCompleted);
            }
            this.InvokeAsync("ExportAccounts", new object[] {
                        Login,
                        Password}, this.ExportAccountsOperationCompleted, userState);
        }
        
        private void OnExportAccountsOperationCompleted(object arg) {
            if ((this.ExportAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportAccountsCompleted(this, new ExportAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/ExportAccountsUsingDateRange", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportAccountsUsingDateRange(string Login, string Password, System.DateTime FromDate, System.DateTime ToDate) {
            object[] results = this.Invoke("ExportAccountsUsingDateRange", new object[] {
                        Login,
                        Password,
                        FromDate,
                        ToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportAccountsUsingDateRangeAsync(string Login, string Password, System.DateTime FromDate, System.DateTime ToDate) {
            this.ExportAccountsUsingDateRangeAsync(Login, Password, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void ExportAccountsUsingDateRangeAsync(string Login, string Password, System.DateTime FromDate, System.DateTime ToDate, object userState) {
            if ((this.ExportAccountsUsingDateRangeOperationCompleted == null)) {
                this.ExportAccountsUsingDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportAccountsUsingDateRangeOperationCompleted);
            }
            this.InvokeAsync("ExportAccountsUsingDateRange", new object[] {
                        Login,
                        Password,
                        FromDate,
                        ToDate}, this.ExportAccountsUsingDateRangeOperationCompleted, userState);
        }
        
        private void OnExportAccountsUsingDateRangeOperationCompleted(object arg) {
            if ((this.ExportAccountsUsingDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportAccountsUsingDateRangeCompleted(this, new ExportAccountsUsingDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/InsertAccount", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertAccount(string Login, string Password, string AccountCode, System.Guid ContactTypeID, string[] ColumnNames, object[] Account, string Options, out System.Guid MagicoID, out string StatusCode) {
            object[] results = this.Invoke("InsertAccount", new object[] {
                        Login,
                        Password,
                        AccountCode,
                        ContactTypeID,
                        ColumnNames,
                        Account,
                        Options});
            MagicoID = ((System.Guid)(results[1]));
            StatusCode = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAccountAsync(string Login, string Password, string AccountCode, System.Guid ContactTypeID, string[] ColumnNames, object[] Account, string Options) {
            this.InsertAccountAsync(Login, Password, AccountCode, ContactTypeID, ColumnNames, Account, Options, null);
        }
        
        /// <remarks/>
        public void InsertAccountAsync(string Login, string Password, string AccountCode, System.Guid ContactTypeID, string[] ColumnNames, object[] Account, string Options, object userState) {
            if ((this.InsertAccountOperationCompleted == null)) {
                this.InsertAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAccountOperationCompleted);
            }
            this.InvokeAsync("InsertAccount", new object[] {
                        Login,
                        Password,
                        AccountCode,
                        ContactTypeID,
                        ColumnNames,
                        Account,
                        Options}, this.InsertAccountOperationCompleted, userState);
        }
        
        private void OnInsertAccountOperationCompleted(object arg) {
            if ((this.InsertAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAccountCompleted(this, new InsertAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/UpdateAccount", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateAccount(string Login, string Password, string AccountCode, string[] ColumnNames, object[] Account, string Options, out string StatusCode) {
            object[] results = this.Invoke("UpdateAccount", new object[] {
                        Login,
                        Password,
                        AccountCode,
                        ColumnNames,
                        Account,
                        Options});
            StatusCode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAccountAsync(string Login, string Password, string AccountCode, string[] ColumnNames, object[] Account, string Options) {
            this.UpdateAccountAsync(Login, Password, AccountCode, ColumnNames, Account, Options, null);
        }
        
        /// <remarks/>
        public void UpdateAccountAsync(string Login, string Password, string AccountCode, string[] ColumnNames, object[] Account, string Options, object userState) {
            if ((this.UpdateAccountOperationCompleted == null)) {
                this.UpdateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAccountOperationCompleted);
            }
            this.InvokeAsync("UpdateAccount", new object[] {
                        Login,
                        Password,
                        AccountCode,
                        ColumnNames,
                        Account,
                        Options}, this.UpdateAccountOperationCompleted, userState);
        }
        
        private void OnUpdateAccountOperationCompleted(object arg) {
            if ((this.UpdateAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAccountCompleted(this, new UpdateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/DeleteAccount", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteAccount(string Login, string Password, System.Guid AccountID, string Options, out string StatusCode) {
            object[] results = this.Invoke("DeleteAccount", new object[] {
                        Login,
                        Password,
                        AccountID,
                        Options});
            StatusCode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAccountAsync(string Login, string Password, System.Guid AccountID, string Options) {
            this.DeleteAccountAsync(Login, Password, AccountID, Options, null);
        }
        
        /// <remarks/>
        public void DeleteAccountAsync(string Login, string Password, System.Guid AccountID, string Options, object userState) {
            if ((this.DeleteAccountOperationCompleted == null)) {
                this.DeleteAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAccountOperationCompleted);
            }
            this.InvokeAsync("DeleteAccount", new object[] {
                        Login,
                        Password,
                        AccountID,
                        Options}, this.DeleteAccountOperationCompleted, userState);
        }
        
        private void OnDeleteAccountOperationCompleted(object arg) {
            if ((this.DeleteAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAccountCompleted(this, new DeleteAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void TestPingCompletedEventHandler(object sender, TestPingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void ExportAccountsCompletedEventHandler(object sender, ExportAccountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void ExportAccountsUsingDateRangeCompletedEventHandler(object sender, ExportAccountsUsingDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportAccountsUsingDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportAccountsUsingDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void InsertAccountCompletedEventHandler(object sender, InsertAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid MagicoID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void UpdateAccountCompletedEventHandler(object sender, UpdateAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void DeleteAccountCompletedEventHandler(object sender, DeleteAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591