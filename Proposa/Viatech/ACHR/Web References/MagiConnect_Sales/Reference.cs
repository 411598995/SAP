//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ACHR.MagiConnect_Sales {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="salesSoap", Namespace="http://www.magishop.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class sales : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestPingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportOrdersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportOrdersUsingDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportShipmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrderStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetShipmentsToCompletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportProductQuantitiesForNewOrdersOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOrderV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOrderItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrderItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOrderItemOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public sales() {
            this.Url = global::ACHR.Properties.Settings.Default.ViaTech_Magin_Sales_sales;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestPingCompletedEventHandler TestPingCompleted;
        
        /// <remarks/>
        public event ExportOrdersCompletedEventHandler ExportOrdersCompleted;
        
        /// <remarks/>
        public event ExportOrdersUsingDateRangeCompletedEventHandler ExportOrdersUsingDateRangeCompleted;
        
        /// <remarks/>
        public event ExportShipmentsCompletedEventHandler ExportShipmentsCompleted;
        
        /// <remarks/>
        public event UpdateOrderStatusCompletedEventHandler UpdateOrderStatusCompleted;
        
        /// <remarks/>
        public event SetShipmentsToCompletedCompletedEventHandler SetShipmentsToCompletedCompleted;
        
        /// <remarks/>
        public event ExportProductQuantitiesForNewOrdersCompletedEventHandler ExportProductQuantitiesForNewOrdersCompleted;
        
        /// <remarks/>
        public event InsertOrderCompletedEventHandler InsertOrderCompleted;
        
        /// <remarks/>
        public event InsertOrderV2CompletedEventHandler InsertOrderV2Completed;
        
        /// <remarks/>
        public event UpdateOrderCompletedEventHandler UpdateOrderCompleted;
        
        /// <remarks/>
        public event DeleteOrderCompletedEventHandler DeleteOrderCompleted;
        
        /// <remarks/>
        public event InsertOrderItemCompletedEventHandler InsertOrderItemCompleted;
        
        /// <remarks/>
        public event UpdateOrderItemCompletedEventHandler UpdateOrderItemCompleted;
        
        /// <remarks/>
        public event DeleteOrderItemCompletedEventHandler DeleteOrderItemCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/TestPing", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TestPing(string[] Parameters) {
            object[] results = this.Invoke("TestPing", new object[] {
                        Parameters});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TestPingAsync(string[] Parameters) {
            this.TestPingAsync(Parameters, null);
        }
        
        /// <remarks/>
        public void TestPingAsync(string[] Parameters, object userState) {
            if ((this.TestPingOperationCompleted == null)) {
                this.TestPingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestPingOperationCompleted);
            }
            this.InvokeAsync("TestPing", new object[] {
                        Parameters}, this.TestPingOperationCompleted, userState);
        }
        
        private void OnTestPingOperationCompleted(object arg) {
            if ((this.TestPingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestPingCompleted(this, new TestPingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/ExportOrders", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportOrders(string Login, string Password, System.Guid FilterStatusID) {
            object[] results = this.Invoke("ExportOrders", new object[] {
                        Login,
                        Password,
                        FilterStatusID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportOrdersAsync(string Login, string Password, System.Guid FilterStatusID) {
            this.ExportOrdersAsync(Login, Password, FilterStatusID, null);
        }
        
        /// <remarks/>
        public void ExportOrdersAsync(string Login, string Password, System.Guid FilterStatusID, object userState) {
            if ((this.ExportOrdersOperationCompleted == null)) {
                this.ExportOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportOrdersOperationCompleted);
            }
            this.InvokeAsync("ExportOrders", new object[] {
                        Login,
                        Password,
                        FilterStatusID}, this.ExportOrdersOperationCompleted, userState);
        }
        
        private void OnExportOrdersOperationCompleted(object arg) {
            if ((this.ExportOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportOrdersCompleted(this, new ExportOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/ExportOrdersUsingDateRange", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportOrdersUsingDateRange(string Login, string Password, System.Guid FilterStatusID, System.DateTime FromDate, System.DateTime ToDate) {
            object[] results = this.Invoke("ExportOrdersUsingDateRange", new object[] {
                        Login,
                        Password,
                        FilterStatusID,
                        FromDate,
                        ToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportOrdersUsingDateRangeAsync(string Login, string Password, System.Guid FilterStatusID, System.DateTime FromDate, System.DateTime ToDate) {
            this.ExportOrdersUsingDateRangeAsync(Login, Password, FilterStatusID, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void ExportOrdersUsingDateRangeAsync(string Login, string Password, System.Guid FilterStatusID, System.DateTime FromDate, System.DateTime ToDate, object userState) {
            if ((this.ExportOrdersUsingDateRangeOperationCompleted == null)) {
                this.ExportOrdersUsingDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportOrdersUsingDateRangeOperationCompleted);
            }
            this.InvokeAsync("ExportOrdersUsingDateRange", new object[] {
                        Login,
                        Password,
                        FilterStatusID,
                        FromDate,
                        ToDate}, this.ExportOrdersUsingDateRangeOperationCompleted, userState);
        }
        
        private void OnExportOrdersUsingDateRangeOperationCompleted(object arg) {
            if ((this.ExportOrdersUsingDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportOrdersUsingDateRangeCompleted(this, new ExportOrdersUsingDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/ExportShipments", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportShipments(string Login, string Password) {
            object[] results = this.Invoke("ExportShipments", new object[] {
                        Login,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportShipmentsAsync(string Login, string Password) {
            this.ExportShipmentsAsync(Login, Password, null);
        }
        
        /// <remarks/>
        public void ExportShipmentsAsync(string Login, string Password, object userState) {
            if ((this.ExportShipmentsOperationCompleted == null)) {
                this.ExportShipmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportShipmentsOperationCompleted);
            }
            this.InvokeAsync("ExportShipments", new object[] {
                        Login,
                        Password}, this.ExportShipmentsOperationCompleted, userState);
        }
        
        private void OnExportShipmentsOperationCompleted(object arg) {
            if ((this.ExportShipmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportShipmentsCompleted(this, new ExportShipmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/UpdateOrderStatus", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateOrderStatus(string Login, string Password, System.Guid OrderID, System.Guid FromStatusID, System.Guid ToStatusID, string OrderTrackingReference, string OrderStatusMessage) {
            object[] results = this.Invoke("UpdateOrderStatus", new object[] {
                        Login,
                        Password,
                        OrderID,
                        FromStatusID,
                        ToStatusID,
                        OrderTrackingReference,
                        OrderStatusMessage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrderStatusAsync(string Login, string Password, System.Guid OrderID, System.Guid FromStatusID, System.Guid ToStatusID, string OrderTrackingReference, string OrderStatusMessage) {
            this.UpdateOrderStatusAsync(Login, Password, OrderID, FromStatusID, ToStatusID, OrderTrackingReference, OrderStatusMessage, null);
        }
        
        /// <remarks/>
        public void UpdateOrderStatusAsync(string Login, string Password, System.Guid OrderID, System.Guid FromStatusID, System.Guid ToStatusID, string OrderTrackingReference, string OrderStatusMessage, object userState) {
            if ((this.UpdateOrderStatusOperationCompleted == null)) {
                this.UpdateOrderStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateOrderStatus", new object[] {
                        Login,
                        Password,
                        OrderID,
                        FromStatusID,
                        ToStatusID,
                        OrderTrackingReference,
                        OrderStatusMessage}, this.UpdateOrderStatusOperationCompleted, userState);
        }
        
        private void OnUpdateOrderStatusOperationCompleted(object arg) {
            if ((this.UpdateOrderStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderStatusCompleted(this, new UpdateOrderStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/SetShipmentsToCompleted", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetShipmentsToCompleted(string Login, string Password, string ShipmentIDs_Commaseperated) {
            object[] results = this.Invoke("SetShipmentsToCompleted", new object[] {
                        Login,
                        Password,
                        ShipmentIDs_Commaseperated});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetShipmentsToCompletedAsync(string Login, string Password, string ShipmentIDs_Commaseperated) {
            this.SetShipmentsToCompletedAsync(Login, Password, ShipmentIDs_Commaseperated, null);
        }
        
        /// <remarks/>
        public void SetShipmentsToCompletedAsync(string Login, string Password, string ShipmentIDs_Commaseperated, object userState) {
            if ((this.SetShipmentsToCompletedOperationCompleted == null)) {
                this.SetShipmentsToCompletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetShipmentsToCompletedOperationCompleted);
            }
            this.InvokeAsync("SetShipmentsToCompleted", new object[] {
                        Login,
                        Password,
                        ShipmentIDs_Commaseperated}, this.SetShipmentsToCompletedOperationCompleted, userState);
        }
        
        private void OnSetShipmentsToCompletedOperationCompleted(object arg) {
            if ((this.SetShipmentsToCompletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetShipmentsToCompletedCompleted(this, new SetShipmentsToCompletedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/ExportProductQuantitiesForNewOrders", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExportProductQuantitiesForNewOrders(string Login, string Password) {
            object[] results = this.Invoke("ExportProductQuantitiesForNewOrders", new object[] {
                        Login,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExportProductQuantitiesForNewOrdersAsync(string Login, string Password) {
            this.ExportProductQuantitiesForNewOrdersAsync(Login, Password, null);
        }
        
        /// <remarks/>
        public void ExportProductQuantitiesForNewOrdersAsync(string Login, string Password, object userState) {
            if ((this.ExportProductQuantitiesForNewOrdersOperationCompleted == null)) {
                this.ExportProductQuantitiesForNewOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportProductQuantitiesForNewOrdersOperationCompleted);
            }
            this.InvokeAsync("ExportProductQuantitiesForNewOrders", new object[] {
                        Login,
                        Password}, this.ExportProductQuantitiesForNewOrdersOperationCompleted, userState);
        }
        
        private void OnExportProductQuantitiesForNewOrdersOperationCompleted(object arg) {
            if ((this.ExportProductQuantitiesForNewOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportProductQuantitiesForNewOrdersCompleted(this, new ExportProductQuantitiesForNewOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/InsertOrder", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertOrder(string Login, string Password, string OrderNumber, string CurrencyCode, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options, out System.Guid MagicoID, out string StatusCode) {
            object[] results = this.Invoke("InsertOrder", new object[] {
                        Login,
                        Password,
                        OrderNumber,
                        CurrencyCode,
                        AccountCode,
                        ColumnNames,
                        OrderObject,
                        Options});
            MagicoID = ((System.Guid)(results[1]));
            StatusCode = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertOrderAsync(string Login, string Password, string OrderNumber, string CurrencyCode, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options) {
            this.InsertOrderAsync(Login, Password, OrderNumber, CurrencyCode, AccountCode, ColumnNames, OrderObject, Options, null);
        }
        
        /// <remarks/>
        public void InsertOrderAsync(string Login, string Password, string OrderNumber, string CurrencyCode, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options, object userState) {
            if ((this.InsertOrderOperationCompleted == null)) {
                this.InsertOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOrderOperationCompleted);
            }
            this.InvokeAsync("InsertOrder", new object[] {
                        Login,
                        Password,
                        OrderNumber,
                        CurrencyCode,
                        AccountCode,
                        ColumnNames,
                        OrderObject,
                        Options}, this.InsertOrderOperationCompleted, userState);
        }
        
        private void OnInsertOrderOperationCompleted(object arg) {
            if ((this.InsertOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertOrderCompleted(this, new InsertOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/InsertOrderV2", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertOrderV2(string Login, string Password, string OrderNumber, string CurrencyCode, AccountCodeType AccountCodeType, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options, out System.Guid MagicoID, out string StatusCode) {
            object[] results = this.Invoke("InsertOrderV2", new object[] {
                        Login,
                        Password,
                        OrderNumber,
                        CurrencyCode,
                        AccountCodeType,
                        AccountCode,
                        ColumnNames,
                        OrderObject,
                        Options});
            MagicoID = ((System.Guid)(results[1]));
            StatusCode = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertOrderV2Async(string Login, string Password, string OrderNumber, string CurrencyCode, AccountCodeType AccountCodeType, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options) {
            this.InsertOrderV2Async(Login, Password, OrderNumber, CurrencyCode, AccountCodeType, AccountCode, ColumnNames, OrderObject, Options, null);
        }
        
        /// <remarks/>
        public void InsertOrderV2Async(string Login, string Password, string OrderNumber, string CurrencyCode, AccountCodeType AccountCodeType, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options, object userState) {
            if ((this.InsertOrderV2OperationCompleted == null)) {
                this.InsertOrderV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOrderV2OperationCompleted);
            }
            this.InvokeAsync("InsertOrderV2", new object[] {
                        Login,
                        Password,
                        OrderNumber,
                        CurrencyCode,
                        AccountCodeType,
                        AccountCode,
                        ColumnNames,
                        OrderObject,
                        Options}, this.InsertOrderV2OperationCompleted, userState);
        }
        
        private void OnInsertOrderV2OperationCompleted(object arg) {
            if ((this.InsertOrderV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertOrderV2Completed(this, new InsertOrderV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/UpdateOrder", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateOrder(string Login, string Password, System.Guid OrderID, string OrderNumber, string CurrencyCode, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options, out string StatusCode) {
            object[] results = this.Invoke("UpdateOrder", new object[] {
                        Login,
                        Password,
                        OrderID,
                        OrderNumber,
                        CurrencyCode,
                        AccountCode,
                        ColumnNames,
                        OrderObject,
                        Options});
            StatusCode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrderAsync(string Login, string Password, System.Guid OrderID, string OrderNumber, string CurrencyCode, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options) {
            this.UpdateOrderAsync(Login, Password, OrderID, OrderNumber, CurrencyCode, AccountCode, ColumnNames, OrderObject, Options, null);
        }
        
        /// <remarks/>
        public void UpdateOrderAsync(string Login, string Password, System.Guid OrderID, string OrderNumber, string CurrencyCode, string AccountCode, string[] ColumnNames, object[] OrderObject, string Options, object userState) {
            if ((this.UpdateOrderOperationCompleted == null)) {
                this.UpdateOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderOperationCompleted);
            }
            this.InvokeAsync("UpdateOrder", new object[] {
                        Login,
                        Password,
                        OrderID,
                        OrderNumber,
                        CurrencyCode,
                        AccountCode,
                        ColumnNames,
                        OrderObject,
                        Options}, this.UpdateOrderOperationCompleted, userState);
        }
        
        private void OnUpdateOrderOperationCompleted(object arg) {
            if ((this.UpdateOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderCompleted(this, new UpdateOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/DeleteOrder", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteOrder(string Login, string Password, System.Guid OrderID, string Options, out string StatusCode) {
            object[] results = this.Invoke("DeleteOrder", new object[] {
                        Login,
                        Password,
                        OrderID,
                        Options});
            StatusCode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOrderAsync(string Login, string Password, System.Guid OrderID, string Options) {
            this.DeleteOrderAsync(Login, Password, OrderID, Options, null);
        }
        
        /// <remarks/>
        public void DeleteOrderAsync(string Login, string Password, System.Guid OrderID, string Options, object userState) {
            if ((this.DeleteOrderOperationCompleted == null)) {
                this.DeleteOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrderOperationCompleted);
            }
            this.InvokeAsync("DeleteOrder", new object[] {
                        Login,
                        Password,
                        OrderID,
                        Options}, this.DeleteOrderOperationCompleted, userState);
        }
        
        private void OnDeleteOrderOperationCompleted(object arg) {
            if ((this.DeleteOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrderCompleted(this, new DeleteOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/InsertOrderItem", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertOrderItem(string Login, string Password, string OrderNumber, string[] ColumnNames, object[] OrderItemObject, string Options, out System.Guid MagicoID, out string StatusCode) {
            object[] results = this.Invoke("InsertOrderItem", new object[] {
                        Login,
                        Password,
                        OrderNumber,
                        ColumnNames,
                        OrderItemObject,
                        Options});
            MagicoID = ((System.Guid)(results[1]));
            StatusCode = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertOrderItemAsync(string Login, string Password, string OrderNumber, string[] ColumnNames, object[] OrderItemObject, string Options) {
            this.InsertOrderItemAsync(Login, Password, OrderNumber, ColumnNames, OrderItemObject, Options, null);
        }
        
        /// <remarks/>
        public void InsertOrderItemAsync(string Login, string Password, string OrderNumber, string[] ColumnNames, object[] OrderItemObject, string Options, object userState) {
            if ((this.InsertOrderItemOperationCompleted == null)) {
                this.InsertOrderItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOrderItemOperationCompleted);
            }
            this.InvokeAsync("InsertOrderItem", new object[] {
                        Login,
                        Password,
                        OrderNumber,
                        ColumnNames,
                        OrderItemObject,
                        Options}, this.InsertOrderItemOperationCompleted, userState);
        }
        
        private void OnInsertOrderItemOperationCompleted(object arg) {
            if ((this.InsertOrderItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertOrderItemCompleted(this, new InsertOrderItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/UpdateOrderItem", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateOrderItem(string Login, string Password, System.Guid OrderItemID, string[] ColumnNames, object[] OrderItemObject, string Options, out string StatusCode) {
            object[] results = this.Invoke("UpdateOrderItem", new object[] {
                        Login,
                        Password,
                        OrderItemID,
                        ColumnNames,
                        OrderItemObject,
                        Options});
            StatusCode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrderItemAsync(string Login, string Password, System.Guid OrderItemID, string[] ColumnNames, object[] OrderItemObject, string Options) {
            this.UpdateOrderItemAsync(Login, Password, OrderItemID, ColumnNames, OrderItemObject, Options, null);
        }
        
        /// <remarks/>
        public void UpdateOrderItemAsync(string Login, string Password, System.Guid OrderItemID, string[] ColumnNames, object[] OrderItemObject, string Options, object userState) {
            if ((this.UpdateOrderItemOperationCompleted == null)) {
                this.UpdateOrderItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderItemOperationCompleted);
            }
            this.InvokeAsync("UpdateOrderItem", new object[] {
                        Login,
                        Password,
                        OrderItemID,
                        ColumnNames,
                        OrderItemObject,
                        Options}, this.UpdateOrderItemOperationCompleted, userState);
        }
        
        private void OnUpdateOrderItemOperationCompleted(object arg) {
            if ((this.UpdateOrderItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderItemCompleted(this, new UpdateOrderItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.magishop.com/DeleteOrderItem", RequestNamespace="http://www.magishop.com/", ResponseNamespace="http://www.magishop.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteOrderItem(string Login, string Password, System.Guid OrderItemID, string Options, out string StatusCode) {
            object[] results = this.Invoke("DeleteOrderItem", new object[] {
                        Login,
                        Password,
                        OrderItemID,
                        Options});
            StatusCode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOrderItemAsync(string Login, string Password, System.Guid OrderItemID, string Options) {
            this.DeleteOrderItemAsync(Login, Password, OrderItemID, Options, null);
        }
        
        /// <remarks/>
        public void DeleteOrderItemAsync(string Login, string Password, System.Guid OrderItemID, string Options, object userState) {
            if ((this.DeleteOrderItemOperationCompleted == null)) {
                this.DeleteOrderItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrderItemOperationCompleted);
            }
            this.InvokeAsync("DeleteOrderItem", new object[] {
                        Login,
                        Password,
                        OrderItemID,
                        Options}, this.DeleteOrderItemOperationCompleted, userState);
        }
        
        private void OnDeleteOrderItemOperationCompleted(object arg) {
            if ((this.DeleteOrderItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrderItemCompleted(this, new DeleteOrderItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.magishop.com/")]
    public enum AccountCodeType {
        
        /// <remarks/>
        ExternalAccountCode,
        
        /// <remarks/>
        ContactId,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void TestPingCompletedEventHandler(object sender, TestPingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExportOrdersCompletedEventHandler(object sender, ExportOrdersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExportOrdersUsingDateRangeCompletedEventHandler(object sender, ExportOrdersUsingDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportOrdersUsingDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportOrdersUsingDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExportShipmentsCompletedEventHandler(object sender, ExportShipmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportShipmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportShipmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdateOrderStatusCompletedEventHandler(object sender, UpdateOrderStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrderStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetShipmentsToCompletedCompletedEventHandler(object sender, SetShipmentsToCompletedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetShipmentsToCompletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetShipmentsToCompletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExportProductQuantitiesForNewOrdersCompletedEventHandler(object sender, ExportProductQuantitiesForNewOrdersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportProductQuantitiesForNewOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportProductQuantitiesForNewOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void InsertOrderCompletedEventHandler(object sender, InsertOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid MagicoID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void InsertOrderV2CompletedEventHandler(object sender, InsertOrderV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertOrderV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertOrderV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid MagicoID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdateOrderCompletedEventHandler(object sender, UpdateOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DeleteOrderCompletedEventHandler(object sender, DeleteOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void InsertOrderItemCompletedEventHandler(object sender, InsertOrderItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertOrderItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertOrderItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid MagicoID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdateOrderItemCompletedEventHandler(object sender, UpdateOrderItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrderItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DeleteOrderItemCompletedEventHandler(object sender, DeleteOrderItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOrderItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOrderItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591